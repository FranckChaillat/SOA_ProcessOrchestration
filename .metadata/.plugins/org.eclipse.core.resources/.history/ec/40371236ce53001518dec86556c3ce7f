package serviceConsumer.serviceInventory


import workflowOrchestration.exceptions.InvalidServiceException
import java.util.Currency
import java.sql.ResultSet
import java.sql.CallableStatement
import processOrchestration.Constraint
import processOrchestration.Param
import scala.collection.mutable.ListBuffer
import processOrchestration.Silos
import processOrchestration.Silos
import scala.collection.immutable.Map
import scala.collection.immutable.HashMap

/**
 * @author fra
 */
object InventoryManager {
  


  //TODO : handle exceptions !!!
  def getSilos() : Seq[Silos] = {
   
   val res = DBAccessor.execQuery("getSilos", Seq())
   res.map((f)=>{  new Silos(f("name").toString, f("baseUri").toString, f("idSilos").toString)})
  }
  
    //TODO : handle exceptions !!!
  def getDiscoveryProps(silosName : String): Map[String, String] ={
      
    if(DBAccessor.conn.isClosed)
      DBAccessor.loadConn
      
      val stm = DBAccessor.conn.prepareCall("call getDiscoveryProps(?)")
      stm.setString(1, silosName)
      val rs = stm.executeQuery
      
      var res : Map[String, String] = Map()
      if(rs.next){ res =res.+(rs.getMetaData.getColumnName(1) -> rs.getString(1))
                   res= res.+(rs.getMetaData.getColumnName(2) -> rs.getString(2))
                   res =res.+(rs.getMetaData.getColumnName(3) -> rs.getString(3))}
      else throw new InvalidServiceException("le service ne semble pas exister dans l'inventaire de service")
    
    res
  }
  
  
  def getCapability(name: String): Map [String, String] = {
    

    val res = DBAccessor.execQuery("getCapability", name.split("/"))
    
    if(res.length==1){
                  Map("name" -> res(0)("name").toString,
                       "host" -> res(0)("host").toString,
                       "uri"-> res(0)("uri").toString,
                       "httpMethod" -> res(0)("httpMethod").toString,
                       "dataType" -> res(0)("dataType").toString,
                       "baseUri" -> res(0)("baseUri").toString)
    }else Map()
  }
  
  
  def insertService(p : Map[String, Any]){
    
    val l = Seq( p("host"),p("serviceName"), p("silosId"), p("uri"))
    DBAccessor.execQuery("insertService", l)
    
  }
  
  
  def getService(name : String = "" ): Seq[Map[String, String]] = {
   
    val res = if(name.isEmpty())
                DBAccessor.execQuery("getServices", Seq())
              else DBAccessor.execQuery("getService", Seq(name))
    

    res.map((x)=> { Map("serviceName"->x("serviceName").toString,
                        "name" -> x("name").toString,
                        "uri"-> x("uri").toString)
    })
  }
  
  
  
 def getParamConstraints(capName: String) : Seq[Param] = {
    
    val res = DBAccessor.execQuery("getConstraints", Seq(capName))
    /*val callStm = DBAccessor.conn.prepareCall("call getConstraints(?)")
    callStm.setString(1, capName)
    val rs = callStm.executeQuery*/
    
     val p : ListBuffer[Param] = ListBuffer()
     res.foreach((x)=>{  
       val filtered =p.filter { y => y.name == x("name")}
       
       if(filtered.length>0)  filtered.head.constraint.+:(new Constraint(x("field").toString,
                                                                             rs.getString("func"),
                                                                             rs.getString("value")))
          else p.+=(new Param(rs.getString("name"), rs.getString("type"), "", rs.getInt("seq"), Seq(new Constraint(rs.getString("field"),
                                                                                                                     rs.getString("func"),
                                                                                                                     rs.getString("value")))))
       
     })
     
     
     
         
          
      }
   
    p.toSeq
 }
 
 
 
  
   private def split(sep:Char, source :String):Array[String] = {
     if(source.contains(sep)) 
       return source.split(sep.toString)
     else 
       return Array(source)
  }
  
}